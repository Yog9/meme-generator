{"version":3,"sources":["Generator.js","Header.js","serviceWorker.js","index.js"],"names":["Generator","state","upperText","lowerText","font","color","img","img_src","handleChange","e","_this","setState","Object","defineProperty","target","name","value","console","log","handleGenerate","length","index","Math","floor","random","src","url","_this2","this","axios","get","then","response","data","memes","catch","error","react_default","a","createElement","className","style","parseInt","type","placeholder","onChange","onClick","download","href","Component","Header","src_Generator","Boolean","window","location","hostname","match","ReactDOM","render","src_Header","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAqGeA,6MAlGbC,MAAQ,CACNC,UAAW,GACXC,UAAW,GACXC,KAAM,GACNC,MAAO,QACPC,IAAK,GACLC,QAAS,oCAEXC,aAAe,SAAAC,GACbC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBH,EAAEK,OAAOC,KAAON,EAAEK,OAAOE,QAC1CC,QAAQC,IAAIR,EAAKT,UAEnBkB,eAAiB,WACf,IAAIC,EAASV,EAAKT,MAAMK,IAAIc,OACxBC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWJ,GACnCK,EAAMf,EAAKT,MAAMK,IAAIe,GAAOK,IAChChB,EAAKC,SAAS,CAAEJ,QAASkB,IACzBR,QAAQC,IAAIR,EAAKT,MAAMM,6FAGL,IAAAoB,EAAAC,KAClBC,IACGC,IADH,qCAEGC,KAAK,SAAAC,GAEJL,EAAKhB,SAAS,CACZL,IAAK0B,EAASC,KAAKA,KAAKC,QAE1BjB,QAAQC,IAAI,YAAaS,EAAK1B,MAAMK,IAAI,GAAGoB,OAE5CS,MAAM,SAASC,GACdnB,QAAQC,IAAIkB,sCAKhB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKd,IAAKG,KAAK3B,MAAMM,UACrB8B,EAAAC,EAAAC,cAAA,OACEC,UAAU,MACVC,OACeC,SAASd,KAAK3B,MAAMG,MACjC,CAAEC,MAAOuB,KAAK3B,MAAMI,SAGrBuB,KAAK3B,MAAMC,WAEdmC,EAAAC,EAAAC,cAAA,OACEC,UAAU,SACVC,OACeC,SAASd,KAAK3B,MAAMG,MACjC,CAAEC,MAAOuB,KAAK3B,MAAMI,SAGrBuB,KAAK3B,MAAME,YAIhBkC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACL5B,KAAK,YACL6B,YAAY,mBACZC,SAAUjB,KAAKpB,eAEjB6B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACL5B,KAAK,YACL6B,YAAY,mBACZC,SAAUjB,KAAKpB,eAEjB6B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACL5B,KAAK,OACL6B,YAAY,kBACZC,SAAUjB,KAAKpB,eAEjB6B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACL5B,KAAK,QACL6B,YAAY,cACZC,SAAUjB,KAAKpB,eAEjB6B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQO,QAASlB,KAAKT,gBAAtB,gBACAkB,EAAAC,EAAAC,cAAA,KAAGQ,UAAQ,EAACC,KAAMpB,KAAK3B,MAAMM,SAC3B8B,EAAAC,EAAAC,cAAA,oCA5FYU,aCcTC,mLAXX,OACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,6BAEFF,EAAAC,EAAAC,cAACY,EAAD,cAPaF,aCSDG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAAYC,SAASC,eAAe,SDyH9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.3523d666.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nclass Generator extends Component {\n  state = {\n    upperText: \"\",\n    lowerText: \"\",\n    font: 15,\n    color: \"white\",\n    img: [],\n    img_src: \"https://i.imgflip.com/1bij.jpg\"\n  };\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n    console.log(this.state);\n  };\n  handleGenerate = () => {\n    let length = this.state.img.length;\n    let index = Math.floor(Math.random() * length);\n    let src = this.state.img[index].url;\n    this.setState({ img_src: src });\n    console.log(this.state.img_src);\n  };\n\n  componentDidMount() {\n    axios\n      .get(`https://api.imgflip.com/get_memes`)\n      .then(response => {\n        // handle success\n        this.setState({\n          img: response.data.data.memes\n        });\n        console.log(\"img array\", this.state.img[0].url);\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"img-container\">\n          <img src={this.state.img_src} />\n          <div\n            className=\"top\"\n            style={\n              ({ fontSize: parseInt(this.state.font) + \"px\" },\n              { color: this.state.color })\n            }\n          >\n            {this.state.upperText}\n          </div>\n          <div\n            className=\"bottom\"\n            style={\n              ({ fontSize: parseInt(this.state.font) + \"px\" },\n              { color: this.state.color })\n            }\n          >\n            {this.state.lowerText}\n          </div>\n        </div>\n\n        <div className=\"input_middle\">\n          <input\n            type=\"text\"\n            name=\"upperText\"\n            placeholder=\"Enter Upper Text\"\n            onChange={this.handleChange}\n          />\n          <br />\n          <input\n            type=\"text\"\n            name=\"lowerText\"\n            placeholder=\"Enter Lower Text\"\n            onChange={this.handleChange}\n          />\n          <br />\n          <input\n            type=\"text\"\n            name=\"font\"\n            placeholder=\"Enter Font Size\"\n            onChange={this.handleChange}\n          />\n          <br />\n          <input\n            type=\"text\"\n            name=\"color\"\n            placeholder=\"Enter Color\"\n            onChange={this.handleChange}\n          />\n          <br />\n          <button onClick={this.handleGenerate}>Change Image</button>\n          <a download href={this.state.img_src}>\n            <button>Download</button>\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Generator;\n","import React, { Component } from \"react\";\n\nimport Generator from \"./Generator\";\nclass Header extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"header\">\n          <h1>Meme Generator</h1>\n        </div>\n        <Generator />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./normalize.css\";\nimport \"./index.css\";\nimport Header from \"./Header\";\nimport axios from \"axios\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Header />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}